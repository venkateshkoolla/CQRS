<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Issues.Reporting</name>
    </assembly>
    <members>
        <member name="T:Cake.Issues.Reporting.Aliases">
            <summary>
            Contains functionality related to creating issue reports.
            </summary>
        </member>
        <member name="M:Cake.Issues.Reporting.Aliases.CreateIssueReport(Cake.Core.ICakeContext,Cake.Issues.IIssueProvider,Cake.Issues.Reporting.IIssueReportFormat,Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath)">
            <summary>
            Creates a report for a the issues from an issue provider in the specified format.
            </summary>
            <param name="context">The context.</param>
            <param name="issueProvider">Issue provider for whose issues the report should be generated.</param>
            <param name="reportFormat">Format in which the report should be generated.</param>
            <param name="repositoryRoot">Root path of the repository.</param>
            <param name="outputFilePath">Path of the generated report file.</param>
            <returns>Path to the created report or <c>null</c> if report could not be created.</returns>
            <example>
            <para>Create HTML report using the diagnostic template:</para>
            <code>
            <![CDATA[
                CreateIssueReport(
                    InspectCodeIssuesFromFilePath(
                        @"C:\build\inspectcode.log",
                        MsBuildXmlFileLoggerFormat),
                    GenericIssueReportFormatFromEmbeddedTemplate(GenericIssueReportTemplate.HtmlDiagnostic),
                    @"c:\repo",
                    @"c:\report.html");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Cake.Issues.Reporting.Aliases.CreateIssueReport(Cake.Core.ICakeContext,Cake.Issues.IIssueProvider,Cake.Issues.Reporting.IIssueReportFormat,Cake.Issues.Reporting.CreateIssueReportSettings)">
             <summary>
             Creates a report for a the issues from an issue provider with the specific settings.
             </summary>
             <param name="context">The context.</param>
             <param name="issueProvider">Issue provider for whose issues the report should be generated.</param>
             <param name="reportFormat">Format in which the report should be generated.</param>
             <param name="settings">The settings.</param>
             <returns>Path to the created report or <c>null</c> if report could not be created.</returns>
             <example>
             <para>Create HTML report using the diagnostic template:</para>
             <code>
             <![CDATA[
                 var settings =
                     new CreateIssueReportSettings(@"c:\repo", @"c:\report.html");
            
                 CreateIssueReport(
                     new List<IIssueProvider>
                     InspectCodeIssuesFromFilePath(
                         @"C:\build\inspectcode.log",
                         MsBuildXmlFileLoggerFormat),
                     GenericIssueReportFormatFromEmbeddedTemplate(GenericIssueReportTemplate.HtmlDiagnostic),
                     settings);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Cake.Issues.Reporting.Aliases.CreateIssueReport(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Issues.IIssueProvider},Cake.Issues.Reporting.IIssueReportFormat,Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath)">
            <summary>
            Creates a report for a list of issues in the specified format.
            </summary>
            <param name="context">The context.</param>
            <param name="issueProviders">Issue providers for whose issues the report should be generated.</param>
            <param name="reportFormat">Format in which the report should be generated.</param>
            <param name="repositoryRoot">Root path of the repository.</param>
            <param name="outputFilePath">Path of the generated report file.</param>
            <returns>Path to the created report or <c>null</c> if report could not be created.</returns>
            <example>
            <para>Create HTML report using the diagnostic template:</para>
            <code>
            <![CDATA[
                CreateIssueReport(
                    new List<IIssueProvider>
                    {
                        MsBuildIssuesFromFilePath(
                            @"C:\build\msbuild.log",
                            MsBuildXmlFileLoggerFormat),
                        InspectCodeIssuesFromFilePath(
                            @"C:\build\inspectcode.log",
                            MsBuildXmlFileLoggerFormat)
                    },
                    GenericIssueReportFormatFromEmbeddedTemplate(GenericIssueReportTemplate.HtmlDiagnostic),
                    @"c:\repo",
                    @"c:\report.html");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Cake.Issues.Reporting.Aliases.CreateIssueReport(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Issues.IIssueProvider},Cake.Issues.Reporting.IIssueReportFormat,Cake.Issues.Reporting.CreateIssueReportSettings)">
             <summary>
             Creates a report for a list of issues with the specific settings.
             </summary>
             <param name="context">The context.</param>
             <param name="issueProviders">Issue providers for whose issues the report should be generated.</param>
             <param name="reportFormat">Format in which the report should be generated.</param>
             <param name="settings">The settings.</param>
             <returns>Path to the created report or <c>null</c> if report could not be created.</returns>
             <example>
             <para>Create HTML report using the diagnostic template:</para>
             <code>
             <![CDATA[
                 var settings =
                     new CreateIssueReportSettings(@"c:\repo", @"c:\report.html");
            
                 CreateIssueReport(
                     new List<IIssueProvider>
                     {
                         MsBuildIssuesFromFilePath(
                             @"C:\build\msbuild.log",
                             MsBuildXmlFileLoggerFormat),
                         InspectCodeIssuesFromFilePath(
                             @"C:\build\inspectcode.log",
                             MsBuildXmlFileLoggerFormat)
                     },
                     GenericIssueReportFormatFromEmbeddedTemplate(GenericIssueReportTemplate.HtmlDiagnostic),
                     settings);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Cake.Issues.Reporting.Aliases.CreateIssueReport(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Issues.IIssue},Cake.Issues.Reporting.IIssueReportFormat,Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath)">
            <summary>
            Creates a report for a list of issues in the specified format.
            </summary>
            <param name="context">The context.</param>
            <param name="issues">Issues for which the report should be generated.</param>
            <param name="reportFormat">Format in which the report should be generated.</param>
            <param name="repositoryRoot">Root path of the repository.</param>
            <param name="outputFilePath">Path of the generated report file.</param>
            <returns>Path to the created report or <c>null</c> if report could not be created.</returns>
            <example>
            <para>Create HTML report using the diagnostic template:</para>
            <code>
            <![CDATA[
                CreateIssueReport(
                    issues,
                    GenericIssueReportFormatFromEmbeddedTemplate(GenericIssueReportTemplate.HtmlDiagnostic),
                    @"c:\repo",
                    @"c:\report.html");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Cake.Issues.Reporting.Aliases.CreateIssueReport(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Issues.IIssue},Cake.Issues.Reporting.IIssueReportFormat,Cake.Issues.Reporting.CreateIssueReportSettings)">
             <summary>
             Creates a report for a list of issues with the specific settings.
             </summary>
             <param name="context">The context.</param>
             <param name="issues">Issues for which the report should be generated.</param>
             <param name="reportFormat">Format in which the report should be generated.</param>
             <param name="settings">The settings.</param>
             <returns>Path to the created report or <c>null</c> if report could not be created.</returns>
             <example>
             <para>Create HTML report using the diagnostic template:</para>
             <code>
             <![CDATA[
                 var settings =
                     new CreateIssueReportSettings(@"c:\repo", @"c:\report.html");
            
                 CreateIssueReport(
                     issues,
                     GenericIssueReportFormatFromEmbeddedTemplate(GenericIssueReportTemplate.HtmlDiagnostic),
                     settings);
             ]]>
             </code>
             </example>
        </member>
        <member name="T:Cake.Issues.Reporting.CreateIssueReportSettings">
            <summary>
            Setting affecting how reports are created.
            </summary>
        </member>
        <member name="M:Cake.Issues.Reporting.CreateIssueReportSettings.#ctor(Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Issues.Reporting.CreateIssueReportSettings"/> class.
            </summary>
            <param name="repositoryRoot">Root path of the repository.</param>
            <param name="outputFilePath">Path of the generated report file.</param>
        </member>
        <member name="P:Cake.Issues.Reporting.CreateIssueReportSettings.OutputFilePath">
            <summary>
            Gets the path of the generated report file.
            </summary>
        </member>
        <member name="T:Cake.Issues.Reporting.IIssueReportFormat">
            <summary>
            Interface describing a issue report format.
            </summary>
        </member>
        <member name="M:Cake.Issues.Reporting.IIssueReportFormat.CreateReport(System.Collections.Generic.IEnumerable{Cake.Issues.IIssue})">
            <summary>
            Creates a report from a list of issues.
            </summary>
            <param name="issues">Issues for which the report should be created.</param>
            <returns>Path to the created report.</returns>
        </member>
        <member name="T:Cake.Issues.Reporting.IssueReportCreator">
            <summary>
            Class for creating issue reports.
            </summary>
        </member>
        <member name="M:Cake.Issues.Reporting.IssueReportCreator.#ctor(Cake.Core.Diagnostics.ICakeLog,Cake.Issues.Reporting.CreateIssueReportSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Issues.Reporting.IssueReportCreator"/> class.
            </summary>
            <param name="log">Cake log instance.</param>
            <param name="settings">Settings to use.</param>
        </member>
        <member name="M:Cake.Issues.Reporting.IssueReportCreator.CreateReport(System.Collections.Generic.IEnumerable{Cake.Issues.IIssueProvider},Cake.Issues.Reporting.IIssueReportFormat)">
            <summary>
            Creates a report from a list of issues.
            </summary>
            <param name="issueProviders">Issue providers which should be used to get the issues.</param>
            <param name="reportFormat">Report format to use.</param>
            <returns>Path to the created report or <c>null</c> if report could not be created.</returns>
        </member>
        <member name="M:Cake.Issues.Reporting.IssueReportCreator.CreateReport(System.Collections.Generic.IEnumerable{Cake.Issues.IIssue},Cake.Issues.Reporting.IIssueReportFormat)">
            <summary>
            Creates a report from a list of issues.
            </summary>
            <param name="issues">Issues for which the report should be created.</param>
            <param name="reportFormat">Report format to use.</param>
            <returns>Path to the created report or <c>null</c> if report could not be created.</returns>
        </member>
        <member name="T:Cake.Issues.Reporting.IssueReportFormat">
            <summary>
            Base class for all report format implementations.
            </summary>
        </member>
        <member name="M:Cake.Issues.Reporting.IssueReportFormat.#ctor(Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Issues.Reporting.IssueReportFormat"/> class.
            </summary>
            <param name="log">The Cake log context.</param>
        </member>
        <member name="M:Cake.Issues.Reporting.IssueReportFormat.CreateReport(System.Collections.Generic.IEnumerable{Cake.Issues.IIssue})">
            <inheritdoc />
        </member>
        <member name="M:Cake.Issues.Reporting.IssueReportFormat.InternalCreateReport(System.Collections.Generic.IEnumerable{Cake.Issues.IIssue})">
            <summary>
            Creates a report from a list of issues.
            Compared to <see cref="M:Cake.Issues.Reporting.IssueReportFormat.CreateReport(System.Collections.Generic.IEnumerable{Cake.Issues.IIssue})"/> it is safe to access Settings from this method.
            </summary>
            <param name="issues">Issues for which the report should be created.</param>
            <returns>Path to the created report.</returns>
        </member>
        <member name="T:Cake.Issues.Reporting.ReportingAliasConstants">
            <summary>
            Class containing constants used for defining Cake aliases.
            </summary>
        </member>
        <member name="F:Cake.Issues.Reporting.ReportingAliasConstants.CreateIssueReportCakeAliasCategory">
            <summary>
            Category to use for all Cake aliases providing functionality for creating reports.
            </summary>
        </member>
        <member name="F:Cake.Issues.Reporting.ReportingAliasConstants.ReportingFormatCakeAliasCategory">
            <summary>
            Category to use for all Cake aliases creating pull request systems.
            </summary>
        </member>
    </members>
</doc>
