using System;
using System.Collections.Generic;
using Ocas.Domestic.Apply.Models;
using Ocas.Domestic.Apply.Models.Lookups;
using Ocas.Domestic.Apply.Services.Mappers;
using Ocas.Domestic.AppSettings.Extras;
using Dto = Ocas.Domestic.Models;

namespace Ocas.Domestic.Apply.Api.Services.Mappers
{
    public interface IApiMapper : IApiMapperBase
    {
        IList<AboriginalStatus> MapAboriginalStatus(IList<Dto.AboriginalStatus> list);
        IList<ApplicantMessage> MapApplicantMessages(IList<Dto.ApplicantMessage> list);
        Application MapApplication(Dto.Application model);
        ApplicationCycle MapApplicationCycle(Dto.ApplicationCycle cycle, LookupItem appCycleStatus, DateTime considerationDate);
        IList<ApplicationCycle> MapApplicationCycles(IList<Dto.ApplicationCycle> list, IList<LookupItem> applicationCycleStatuses, IAppSettingsExtras appSettingsExtras);
        IList<Campus> MapCampus(IList<Dto.Campus> list);
        IList<City> MapCity(IList<Dto.City> list);
        College MapCollege(Dto.College college);
        IList<College> MapColleges(IList<Dto.College> list, IList<Dto.SchoolStatus> schoolStatuses);
        CollegeTransmission MapCollegeTransmission(DateTime? lastLoadDateTime, Dto.ProgramChoice choice);
        CollegeTransmission MapCollegeTransmission(DateTime? lastLoadDateTime, Dto.Offer offer);
        CollegeTransmission MapCollegeTransmission(Guid applicationId, DateTime? lastLoadDateTime, Dto.Education education, Guid collegeId);
        CollegeTransmission MapCollegeTransmission(Guid applicationId, DateTime? lastLoadDateTime, Dto.SupportingDocument supportingDocument, Guid collegeId, bool requiredToSend, IList<LookupItem> supportingDocumentTypes, IList<LookupItem> officials, IList<LookupItem> institutes);
        CollegeTransmission MapCollegeTransmission(Guid applicationId, DateTime? lastloadDateTime, Dto.Test test, Guid collegeId, IList<LookupItem> testTypes);
        CollegeTransmission MapCollegeTransmission(Guid applicationId, DateTime? lastLoadDateTime, Guid collegeId, Guid academicRecordId, string name);
        IList<CollegeApplicationCycle> MapCollegeApplicationCycle(IList<Dto.CollegeApplicationCycle> list);
        IList<CollegeInformation> MapCollegeInformations(IList<Dto.CollegeInformation> list);
        IList<Country> MapCountry(IList<Dto.Country> list);
        IList<DocumentPrint> MapDocumentPrints(IList<Dto.DocumentPrint> documentPrints);
        HighSchool MapHighSchool(Dto.HighSchool highSchool);
        IList<HighSchool> MapHighSchools(IList<Dto.HighSchool> list);
        IList<InstituteWarning> MapInstituteWarnings(IList<Dto.TranscriptRequestException> list, IList<Guid> educationExceptions);
        OrderDetail MapOrderDetail(Dto.OrderDetail dbDto);
        PrivacyStatement MapPrivacyStatement(Dto.PrivacyStatement dbDto);
        IList<ProvinceState> MapProvinceState(IList<Dto.ProvinceState> list);
        Receipt MapReceipt(Dto.Receipt dbDto);
        IList<ReferralPartner> MapReferralPartners(IList<Dto.ReferralPartner> list);
        ShoppingCart MapShoppingCart(Dto.ShoppingCart shoppingCart, Dto.Contact applicant);
        IList<SupportingDocument> MapSupportingDocuments(IList<Dto.SupportingDocument> list, IList<LookupItem> supportingDocumentTypes, IList<LookupItem> officials, IList<LookupItem> institutes);
        IList<SupportingDocument> MapSupportingDocuments(IList<Dto.Transcript> transcripts, IList<College> colleges, IList<University> universities);
        IList<SupportingDocument> MapSupportingDocuments(IList<Dto.Test> tests, IList<LookupItem> testTypes);
        IList<SupportingDocument> MapSupportingDocuments(IList<Dto.AcademicRecord> academicRecords);
        TranscriptRequest MapTranscriptRequest(Dto.TranscriptRequest model, IList<LookupItem> instituteTypes, IList<TranscriptTransmission> transmissions);
        IList<TranscriptTransmission> MapTranscriptTransmissions(IList<Dto.TranscriptTransmission> list, IList<Dto.InstituteType> instituteTypes);
        IList<University> MapUniversities(IList<Dto.University> list);
        University MapUniversity(Dto.University university);
        IList<LookupItem> MapLookupItem(IList<Dto.AccountStatus> list);
        IList<LookupItem> MapLookupItem(IList<Dto.ApplicationCycleStatus> list);
        IList<LookupItem> MapLookupItem(IList<Dto.ApplicationStatus> list);
        IList<LookupItem> MapLookupItem(IList<Dto.BasisForAdmission> list);
        IList<LookupItem> MapLookupItem(IList<Dto.CanadianStatus> list);
        IList<LookupItem> MapLookupItem(IList<Dto.CommunityInvolvement> list);
        IList<LookupItem> MapLookupItem(IList<Dto.CourseDelivery> list);
        IList<LookupItem> MapLookupItem(IList<Dto.CourseStatus> list);
        IList<LookupItem> MapLookupItem(IList<Dto.CourseType> list);
        IList<LookupItem> MapLookupItem(IList<Dto.CredentialEvaluationAgency> list);
        IList<LookupItem> MapLookupItem(IList<Dto.Credential> list);
        IList<LookupItem> MapLookupItem(IList<Dto.Currency> list);
        IList<LookupItem> MapLookupItem(IList<Dto.Current> list);
        IList<LookupItem> MapLookupItem(IList<Dto.EntryLevel> list);
        IList<LookupItem> MapLookupItem(IList<Dto.FirstGenerationApplicant> list);
        IList<LookupItem> MapLookupItem(IList<Dto.FirstLanguage> list);
        IList<LookupItem> MapLookupItem(IList<Dto.Gender> list);
        IList<LookupItem> MapLookupItem(IList<Dto.GradeType> list);
        IList<LookupItem> MapLookupItem(IList<Dto.HighestEducation> list);
        IList<LookupItem> MapLookupItem(IList<Dto.HighSkillsMajor> list);
        IList<LookupItem> MapLookupItem(IList<Dto.Institute> list);
        IList<LookupItem> MapLookupItem(IList<Dto.InstituteType> list);
        IList<LookupItem> MapLookupItem(IList<Dto.InternationalCreditAssessmentStatus> list);
        IList<LookupItem> MapLookupItem(IList<Dto.LastGradeCompleted> list);
        IList<LookupItem> MapLookupItem(IList<Dto.LevelAchieved> list);
        IList<LookupItem> MapLookupItem(IList<Dto.LevelOfStudy> list);
        IList<LookupItem> MapLookupItem(IList<Dto.LiteracyTest> list);
        IList<LookupItem> MapLookupItem(IList<Dto.OfferState> list);
        IList<LookupItem> MapLookupItem(IList<Dto.OfferStatus> list);
        IList<LookupItem> MapLookupItem(IList<Dto.OfferStudyMethod> list);
        IList<LookupItem> MapLookupItem(IList<Dto.OfferType> list);
        IList<LookupItem> MapLookupItem(IList<Dto.Official> list);
        IList<LookupItem> MapLookupItem(IList<Dto.OstNote> list);
        IList<LookupItem> MapLookupItem(IList<Dto.PaymentMethod> list);
        IList<LookupItem> MapLookupItem(IList<Dto.PaymentResult> list);
        IList<LookupItem> MapLookupItem(IList<Dto.PreferredCorrespondenceMethod> list);
        IList<LookupItem> MapLookupItem(IList<Dto.PreferredLanguage> list);
        IList<LookupItem> MapLookupItem(IList<Dto.PreferredSponsorAgency> list);
        IList<LookupItem> MapLookupItem(IList<Dto.ProgramIntakeAvailability> list);
        IList<LookupItem> MapLookupItem(IList<Dto.ProgramIntakeStatus> list);
        IList<LookupItem> MapLookupItem(IList<Dto.Promotion> list);
        IList<LookupItem> MapLookupItem(IList<Dto.Source> list);
        IList<LookupItem> MapLookupItem(IList<Dto.StatusOfVisa> list);
        IList<LookupItem> MapLookupItem(IList<Dto.SupportingDocumentType> list);
        IList<LookupItem> MapLookupItem(IList<Dto.TestType> list);
        IList<LookupItem> MapLookupItem(IList<Dto.Title> list);
        IList<LookupItem> MapLookupItem(IList<Dto.TranscriptRequestStatus> list);
    }
}
